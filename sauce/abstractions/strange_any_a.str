false &&
{	strange :
	{	<any> :: abstraction
		(	// dimensions
			#symbol :<<symbol>># <symbol>,
			#cat :<<cat>># <cat>,
			#kind :<<kind>># <kind>,
			#number_data_uint64 :<<number_data_uint64>># <number_data_uint64>,
			(	// no parent
				{
					// exposure
					extract_thing : "one_t const& () const",
					mutate_thing : "one_t& ()",

					// reflection
					type_ :# (<#symbol>),

					cat_ :# (<#cat>),

					cats_ :# (<unordered_herd>), //TODO <herd[<#cat>]>

					kind_ :# (<#kind>),

					kinds_ :# (<unordered_herd>), //TODO <herd[<#kind>]>

					operations_ :# (<unordered_shoal>), //TODO <shoal[<#symbol>, <operation>]>

					// visitor
					visit_ :# (arguments :<inventory>&, <any>),

					// function
					invoke : "any_a<> (any_a<>& thing, list_a<> const& arguments) const",
					operate : "any_a<> (any_a<>& thing, list_a<> const& arguments) const",

					// identification
					identity_ :# (<#number_data_uint64>),
					identity : "void const* () const",

					identical_ :# (thing :<any>#, <any>),
					identical : "bool (any_a<> const& thing) const",

					// comparison
					nothing_ :# (<any>),
					nothing : "bool () const",

					something_ :# (<any>),
					something : "bool () const",

					same_ :# (thing :<any>#, <any>),

					different_ :# (thing :<any>#, <any>),

					less_than_ :# (thing :<any>#, <any>),

					greater_than_ :# (thing :<any>#, <any>),

					less_or_equal_ :# (thing :<any>#, <any>),

					greater_or_equal_ :# (thing :<any>#, <any>),

					hash_ :# (<#number_data_uint64>),
					hash : "std_size_t () const",

					is : "bool (std_string const& s) const",

					// serialization
					contain_ :# (container :<container>&, <>),
					contain_unique_ :# (container :<container>&, unique_herd :<herd[<#number_data_uint64>]>&, <>),
				}
			)
		)
	}
}