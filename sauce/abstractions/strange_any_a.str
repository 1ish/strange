false &&
{	strange :
	{	<any> :: abstraction
		(	// dimensions
			#range :<<range>># <range>,
			#symbol :<<symbol>># <symbol>,
			#cat :<<cat>># <cat>,
			#kind :<<kind>># <kind>,
			#inventory :<<inventory>># <inventory>,
			#unordered_herd :<<unordered_herd>># <unordered_herd>,
			#shoal :<<shoal>># <shoal>,
			#unordered_shoal :<<unordered_shoal>># <unordered_shoal>,
			#number_data_uint64 :<<number_data_uint64>># <number_data_uint64>,
			(	// no parent
				{
					// exposure
					extract_thing : "one_t const& () const",
					mutate_thing : "one_t& ()",

					// reflection
					type_ :# (<#symbol>),

					shared_ :# (<#unordered_shoal>),
					share : "void (shoal& shared_shoal) const",

					cat_ :# (<#cat>),

					cats_ :# (<#unordered_herd>),

					kind_ :# (<#kind>),

					kinds_ :# (<#unordered_herd>),

					operations_ :# (<#unordered_shoal>),

					// visitor
					visit_ :# (arguments :(#inventory)&, <any>),

					// function
					invoke : "any_a<> (any_a<>& thing, range const& arguments) const",
					operate : "any_a<> (any_a<>& thing, range const& arguments) const",

					// identification
					identity_ :# (<#number_data_uint64>),
					identity : "void const* () const",

					identical_ :# (thing :<any>#, <any>),
					identical : "bool (any_a<> const& thing) const",

					// comparison
					nothing_ :# (<any>),
					nothing : "bool () const",

					something_ :# (<any>),
					something : "bool () const",

					same_ :# (thing :<any>#, <any>),

					different_ :# (thing :<any>#, <any>),

					//TODO for set/map 'operator<' : "bool (any_a<> const& thing) const",
					//TODO for set/map 'operator>' : "bool (any_a<> const& thing) const",
					//TODO for set/map 'operator<=' : "bool (any_a<> const& thing) const",
					//TODO for set/map 'operator>=' : "bool (any_a<> const& thing) const",

					hash_ :# (<#number_data_uint64>),
					hash : "std::size_t () const",

					is : "bool (std::string const& s) const",
				}
			)
		)
	}
}