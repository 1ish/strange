false &&
{	strange :
	{	<any> :: abstraction
		(	// dimensions
			#kind :<<kind>># <kind>,
			(	// no parent
				{
					// exposure
					extract_thing : "one_t const& () const",
					mutate_thing : "one_t& ()",

					// reflection
					type_ :# (<symbol>),

					cat_ :# (<cat>),

					cats_ :# (<unordered_herd>), //TODO <herd[<cat>]>

					kind_ :# (<#kind>),

					kinds_ :# (<unordered_herd>), //TODO <herd[<#kind>]>

					operations_ :# (<unordered_shoal>), //TODO <shoal[<symbol>, <operation>]>

					// visitor
					//visit_ :# (arguments :<inventory>&, index :<number_data_int64>#, <>),
					//visit : "void (inventory_a<>& arguments, int64_t index) const",
					visit_ :# (arguments :<inventory>&, <>),

					// function
					invoke : "any_a<> (any_a<>& thing, list_a<> const& arguments) const",
					operate : "any_a<> (any_a<>& thing, list_a<> const& arguments) const",

					// identification
					identity_ :# (<number_data_uint64>),
					identity : "void const* () const",

					identical_ :# (thing :#, <>),
					identical : "bool (any_a<> const& thing) const",

					// comparison
					nothing_ :# (<>),
					nothing : "bool () const",

					something_ :# (<>),
					something : "bool () const",

					same_ :# (thing :#, <>),

					different_ :# (thing :#, <>),

					less_than_ :# (thing :#, <>),

					greater_than_ :# (thing :#, <>),

					less_or_equal_ :# (thing :#, <>),

					greater_or_equal_ :# (thing :#, <>),

					hash_ :# (<number_data_uint64>),
					hash : "std_size_t () const",

					is : "bool (std_string const& s) const",

					// serialization
					pack_ :# (container :<container>&, <>),
					pack_unique_ :# (container :<container>&, unique_herd :<herd[<number_data_uint64>]>&, <>),
				}
			)
		)
	}
}