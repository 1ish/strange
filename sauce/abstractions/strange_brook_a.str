false &&
{	strange :
	{	<brook> :: abstraction
		(	// dimensions
			#primitive :<<>>#,
			(	// parent
				$$<inventory>[<number_data[ #primitive ]>],
				{	// brook
					'operator==' : "bool (brook_a<_primitive> const& brook) const",
					'operator!=' : "bool (brook_a<_primitive> const& brook) const",
					'operator<' : "bool (brook_a<_primitive> const& brook) const",
					'operator>' : "bool (brook_a<_primitive> const& brook) const",
					'operator<=' : "bool (brook_a<_primitive> const& brook) const",
					'operator>=' : "bool (brook_a<_primitive> const& brook) const",

					extract_begin : "random_access_extractor_data_a<number_data_a<_primitive>, typename std::deque<_primitive>::const_iterator> () const",
					extract_end : "random_access_extractor_data_a<number_data_a<_primitive>, typename std::deque<_primitive>::const_iterator> () const",
					mutate_begin : "random_access_mutator_data_a<number_data_a<_primitive>, typename std::deque<_primitive>::iterator> ()",
					mutate_end : "random_access_mutator_data_a<number_data_a<_primitive>, typename std::deque<_primitive>::iterator> ()",

					extract_deque : "std::deque<_primitive> const& () const",
					mutate_deque : "std::deque<_primitive>& ()",
				}
			)
		)
	}
}