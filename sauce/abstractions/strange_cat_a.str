false &&
{	strange :
	{	<cat> :: abstraction
		(	// no dimensions
			(	// parent
				$$<symbol>[],
				{	// cat
					symbolic_ :# (<>),
					symbolic : "bool () const { return symbolic_(); }",

					order_ :# (<number_data_int64>),
					order : "int64_t () const { return order_().to_int_64(); }",

					name_ :# (<symbol>),
					name : "std_string () const { return name_().to_string(); }",

					dimensions_ :# (<flock>), //TODO <flock[<kind>]>

					parameters_ :# (<flock>), //TODO <flock[<kind>]>

					result_ :# (<cat>),

					code_ :# (<lake_int8>),
					code : "std_string () const { return lake::to_string(code_()); }",
				}
			)
		)
	}
}