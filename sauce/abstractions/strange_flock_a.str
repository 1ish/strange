false &&
{	strange :
	{	<flock> :: abstraction //TODO inventory_data_a<_element, std_vector<_element>>
		(	// dimensions
			#element :<<>># <>,
			(	// parent
				$$<inventory>[ #element ],
				{	// flock
					'operator==' : "bool (flock_a<_element> const& flock) const",
					'operator!=' : "bool (flock_a<_element> const& flock) const",
					'operator<' : "bool (flock_a<_element> const& flock) const",
					'operator>' : "bool (flock_a<_element> const& flock) const",
					'operator<=' : "bool (flock_a<_element> const& flock) const",
					'operator>=' : "bool (flock_a<_element> const& flock) const",

					extract_begin : "random_access_extractor_data_a<_element, typename std_vector<_element>::const_iterator> () const",
					extract_end : "random_access_extractor_data_a<_element, typename std_vector<_element>::const_iterator> () const",
					mutate_begin : "random_access_mutator_data_a<_element, typename std_vector<_element>::iterator> ()",
					mutate_end : "random_access_mutator_data_a<_element, typename std_vector<_element>::iterator> ()",

					extract_vector : "std_vector<_element> const& () const",
					mutate_vector : "std_vector<_element>& ()",
				}
			)
		)
	}
}