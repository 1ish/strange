false &&
{	strange :
	{	<inventory> :: abstraction
		(	// dimensions
			#element :<<>># <>,
			(	// parent
				$$<collection>[<number_data_int64>, #element, #element],
				{	// inventory
					has_index : "bool (int64_t index) const { return collection_d<number_data_int64_a<>, _element , _element>::has_(num(index)); }",
					at_index : "_element (int64_t index) const { return collection_d<number_data_int64_a<>, _element , _element>::at_(num(index)); }",
					update_index : "void (int64_t index, _element const& value) { collection_d<number_data_int64_a<>, _element , _element>::update_(num(index), value); }",
					insert_index : "bool (int64_t index, _element const& value) { return collection_d<number_data_int64_a<>, _element , _element>::insert_(num(index), value); }",
					erase_index : "bool (int64_t index) { return collection_d<number_data_int64_a<>, _element , _element>::erase_(num(index)); }",

					// mutable range
					mutate_begin_ := (<random_access_mutator[<#element>]>),
					mutate_end_ := (<random_access_mutator[<#element>]>),
				}
			)
		)
	}
}