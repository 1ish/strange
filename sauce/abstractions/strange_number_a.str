false &&
{	strange :
	{	<number> :: abstraction
		(	// dimensions
			#number_data_int64_a :<<>># <number_data_int64>,
			#number_data_uint64_a :<<>># <number_data_uint64>,
			#number_data_double_a :<<>># <number_data_double>,
			(	// parent
				$$<>[],
				{	// number
					increment_ := (<number>),

					decrement_ := (<number>),

					self_assign_ := (number :<number>#, <number>),

					self_add_ := (number :<number>#, <number>),

					add_ :# (number :<number>#, <number>),
					'operator+' : "number_a<> (number_a<> const& number) const",

					self_subtract_ := (number :<number>#, <number>),

					subtract_ :# (number :<number>#, <number>),
					'operator-' : "number_a<> (number_a<> const& number) const",

					self_multiply_ := (number :<number>#, <number>),

					multiply_ :# (number :<number>#, <number>),
					'operator*' : "number_a<> (number_a<> const& number) const",

					self_divide_ := (number :<number>#, <number>),

					divide_ :# (number :<number>#, <number>),
					'operator/' : "number_a<> (number_a<> const& number) const",

					self_modulo_ := (number :<number>#, <number>),

					modulo_ :# (number :<number>#, <number>),
					'operator%' : "number_a<> (number_a<> const& number) const",

					to_int_64_ :# (<#number_data_int64_a>),
					to_int_64 : "int64_t () const",

					from_int_64_ := (int_64 :<#number_data_int64_a>#, <>),
					from_int_64 : "void (int64_t int_64)",

					to_uint_64_ :# (<#number_data_uint64_a>),
					to_uint_64 : "uint64_t () const",

					from_uint_64_ := (uint_64 :<#number_data_uint64_a>#, <>),
					from_uint_64 : "void (uint64_t uint_64)",

					to_float_64_ :# (<#number_data_double_a>),
					to_float_64 : "double () const",

					from_float_64_ := (int_64 :<#number_data_double_a>#, <>),
					from_float_64 : "void (double int_64)",

					less_than_ :# (number :<number>#, <>),
					'operator<' : "bool (number_a<> const& number) const",

					greater_than_ :# (number :<number>#, <>),
					'operator>' : "bool (number_a<> const& number) const",

					less_or_equal_ :# (number :<number>#, <>),
					'operator<=' : "bool (number_a<> const& number) const",

					greater_or_equal_ :# (number :<number>#, <>),
					'operator>=' : "bool (number_a<> const& number) const",

					byte_size_ :# (<#number_data_int64_a>),
					byte_size : "int64_t () const",

					is_int_ :# (<>),
					is_int : "bool () const",

					is_signed_ :# (<>),
					is_signed : "bool () const",

					is_nan_ :# (<>),
					is_nan : "bool () const",

					is_inf_ :# (<>),
					is_inf : "bool () const",

					is_finite_ :# (<>),
					is_finite : "bool () const",

					is_normal_ :# (<>),
					is_normal : "bool () const",

					little_endian_ :# (<>),
					little_endian : "bool () const",
				}
			)
		)
	}
}