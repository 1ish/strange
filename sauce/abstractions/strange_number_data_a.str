false &&
{	strange :
	{	<number_data> :: abstraction
		(	// dimensions
			#primitive :<<>>#,
			(	// parent
				$$<number>[],
				{	// number data
					'operator==' : "bool (number_data_a<_primitive> const& number) const { return same_(number); }",
					'operator!=' : "bool (number_data_a<_primitive> const& number) const { return different_(number); }",
					'operator<' : "bool (number_data_a<_primitive> const& number) const { return less_than_(number); }",
					'operator>' : "bool (number_data_a<_primitive> const& number) const { return greater_than_(number); }",
					'operator<=' : "bool (number_data_a<_primitive> const& number) const { return less_or_equal_(number); }",
					'operator>=' : "bool (number_data_a<_primitive> const& number) const { return greater_or_equal_(number); }",

					extract_primitive : "_primitive const& () const",
					mutate_primitive : "_primitive& ()",
				}
			)
		)
	}
}