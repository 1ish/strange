false &&
{	strange :
	{	<parcel> :: abstraction //TODO container_data_a<dart_packet>
		(	// no dimensions
			(	// parent
				$$<collection>[<>, <parcel>, <parcel>],
				{	// parcel
					release_ :# (shared_shoal :<shoal>#, <>),
					release_unique_ :# (shared_shoal :<shoal>#, unique_shoal :<shoal[<number_data_uint64>, <>]>&, <>),
					release : "any_a<> (shoal_a<> const& shared_shoal, any_a<>& unique_shoal) const",
/*
					close_ := (<>),
					closed_ :# (<>),
					reopen_ := (<>),

					from_json_ := (lake :<lake_int8>#, <parcel>),
					from_json : "void (std_string const& json) { from_json_(lake_from_string(json)); }",
					to_json_ :# (<lake_int8>),
					to_json : "std_string () const { return lake_to_string(to_json_()); }",

					from_binary_ := (lake :<lake_int8>#, <parcel>),
					from_binary : "void (std_string const& str) { from_binary_(lake_from_string(str)); }",
					to_binary_ :# (<lake_int8>),
					to_binary : "std_string () const { return lake_to_string(to_binary_()); }",

					from_null_ := (<parcel>),
					is_null_ :# (<>),

					from_boolean_ := (boolean :<>#, <parcel>),
					is_boolean_ :# (<>),
					to_boolean_ :# (<>),

					from_number_ := (number :<number>#, <parcel>),
					is_number_ :# (<>),
					to_number_ :# (<number>),

					from_int_64_ := (number :<number_data_int64>#, <parcel>),
					is_int_64_ :# (<>),
					to_int_64_ :# (<number_data_int64>),

					from_float_64_ := (number :<number_data_double>#, <parcel>),
					is_float_64_ :# (<>),
					to_float_64_ :# (<number_data_double>),

					from_lake_ := (lake :<lake_int8>#, <parcel>),
					is_lake_ :# (<>),
					to_lake_ :# (<lake_int8>),

					from_symbol_ := (symbol :<symbol>#, <parcel>),
					to_symbol_ :# (<symbol>),

					from_inventory_ := (inventory :<inventory>#, <parcel>),
					is_inventory_ :# (<>),
					as_inventory_ :# (inventory :<inventory[<parcel>]>&, <>),

					from_herd_ := (herd :<herd>#, <parcel>),
					is_herd_ :# (<>),
					as_herd_ :# (herd :<herd[<parcel>]>&, <>),

					from_shoal_ := (shoal :<shoal>#, <parcel>),
					is_shoal_ :# (<>),
					as_shoal_ :# (shoal :<shoal[<>, <parcel>]>&, <>),
*/
					'operator==' : "bool (parcel_a<> const& parcel) const",
					'operator!=' : "bool (parcel_a<> const& parcel) const",

					keys_begin_ :# (<bidirectional_extractor[<>]>),
					keys_end_ :# (<bidirectional_extractor[<>]>),
					keys_begin : "bidirectional_extractor_data_a<any_a<>, typename dart_packet::iterator> () const",
					keys_end : "bidirectional_extractor_data_a<any_a<>, typename dart_packet::iterator> () const",

					extract_begin : "bidirectional_extractor_data_a<parcel_a<>, typename dart_packet::iterator> () const",
					extract_end : "bidirectional_extractor_data_a<parcel_a<>, typename dart_packet::iterator> () const",

					extract_packet : "dart_packet const& () const",
					mutate_packet : "dart_packet& ()",
				}
			)
		)
	}
}