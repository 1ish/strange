false &&
{	strange :
	{	<parcel> :: abstraction
		(	// no dimensions
			(	// parent
				$$<collection>[<>, <parcel>, <parcel>],
				{	// parcel
					unwrap_ :# (shared_shoal :<shoal>#, <>),
					unwrap_unique_ :# (shared_shoal :<shoal>#, unique_shoal :<shoal[<number_data_uint64>, <>]>&, <>),
/*
					close_ := (<>),
					closed_ :# (<>),
					reopen_ := (<>),

					to_json_ :# (<lake_int8>),
					to_json : "std::string () const { return lake_to_string(to_json_()); }",
					set_json_ :# (json :<lake_int8>&, <>),

					to_binary_ :# (<lake_int8>),
					to_binary : "std::string () const { return lake_to_string(to_binary_()); }",
					set_binary_ :# (binary :<lake_int8>&, <>),

					is_null_ :# (<>),

					is_boolean_ :# (<>),
					to_boolean_ :# (<>),

					is_number_ :# (<>),
					to_number_ :# (<number>),
					set_number_ :# (number :<number>&, <>),

					is_int_64_ :# (<>),
					to_int_64_ :# (<number_data_int64>),
					set_int_64_ :# (number :<number_data_int64>&, <>),

					is_float_64_ :# (<>),
					to_float_64_ :# (<number_data_double>),
					set_float_64_ :# (number :<number_data_double>&, <>),

					is_lake_ :# (<>),
					to_lake_ :# (<lake_int8>),
					set_lake_ :# (lake :<lake_int8>&, <>),

					to_symbol_ :# (<symbol>),

					is_inventory_ :# (<>),
					set_inventory_ :# (inventory :<inventory[<parcel>]>&, <>),

					to_flock_ :# (<flock[<parcel>]>),
					set_flock_ :# (flock :<flock[<parcel>]>&, <>),

					to_squad_ :# (<squad[<parcel>]>),
					set_squad_ :# (squad :<squad[<parcel>]>&, <>),

					is_herd_ :# (<>),
					set_herd_ :# (herd :<herd[<parcel>]>&, <>),

					to_ordered_herd_ :# (<ordered_herd[<parcel>]>),
					set_ordered_herd_ :# (herd :<ordered_herd[<parcel>]>&, <>),

					to_unordered_herd_ :# (<unordered_herd[<parcel>]>),
					set_unordered_herd_ :# (herd :<unordered_herd[<parcel>]>&, <>),

					is_shoal_ :# (<>),
					set_shoal_ :# (shoal :<shoal[<>, <parcel>]>&, <>),

					to_ordered_shoal_ :# (<ordered_shoal[<>, <parcel>]>),
					set_ordered_shoal_ :# (shoal :<ordered_shoal[<>, <parcel>]>&, <>),

					to_unordered_shoal_ :# (<unordered_shoal[<>, <parcel>]>),
					set_unordered_shoal_ :# (shoal :<unordered_shoal[<>, <parcel>]>&, <>),
*/
					'operator==' : "bool (parcel_a<> const& parcel) const",
					'operator!=' : "bool (parcel_a<> const& parcel) const",

					keys_begin_ :# (<bidirectional_extractor[<>]>),
					keys_end_ :# (<bidirectional_extractor[<>]>),
					keys_begin : "bidirectional_extractor_data_a<any_a<>, typename dart::packet::iterator> () const",
					keys_end : "bidirectional_extractor_data_a<any_a<>, typename dart::packet::iterator> () const",

					extract_begin : "bidirectional_extractor_data_a<parcel_a<>, typename dart::packet::iterator> () const",
					extract_end : "bidirectional_extractor_data_a<parcel_a<>, typename dart::packet::iterator> () const",

					extract_packet : "dart::packet const& () const",
					mutate_packet : "dart::packet& ()",
				}
			)
		)
	}
}