false &&
{	strange :
	{	<random_access_const_iterator> :: abstraction
		(	// no dimensions
			(	// parent
				$$<bidirectional_const_iterator>[],
				{	// random access const iterator
					self_add_ := (number :<number>#, <random_access_const_iterator>),

					add_ :# (number :<number>#, <random_access_const_iterator>),

					self_subtract_ := (number :<number>#, <random_access_const_iterator>),

					subtract_ :# (number :<number>#, <random_access_const_iterator>),

					less_than_ :# (it :<random_access_const_iterator>#, <>),
					'operator<' : "bool (random_access_const_iterator_a<> const& it) const { return less_than_(it); }",

					greater_than_ :# (it :<random_access_const_iterator>#, <>),
					'operator>' : "bool (random_access_const_iterator_a<> const& it) const { return greater_than_(it); }",

					less_or_equal_ :# (it :<random_access_const_iterator>#, <>),
					'operator<=' : "bool (random_access_const_iterator_a<> const& it) const { return less_or_equal_(it); }",

					greater_or_equal_ :# (it :<random_access_const_iterator>#, <>),
					'operator>=' : "bool (random_access_const_iterator_a<> const& it) const { return greater_or_equal_(it); }",
				}
			)
		)
	}
}