false &&
{	strange :
	{	<river> :: abstraction
		(	// no dimensions
			(	// parent
				$$<range>[],
				{	// river input
					to_string : "std::string ()",

					get_ := (<number_data_int8>),
					get : "int8_t ()",
	
					peek_ := (<number_data_int8>),
					peek : "int8_t ()",

					unget_ := (<>),
					unget : "void ()",

					putback_ := (int_8 :<number_data_int8>#, <>),
					putback : "void (int8_t int_8)",

					getline_ := (count :<number_data_int64>#, delimiter :<number_data_int8>#, <lake_int8>),
					getline : "std::vector<int8_t> (int64_t count, int8_t delimiter)",

					ignore_ := (count :<number_data_int64>#, <>),
					ignore : "void (int64_t count)",

					read_ := (count :<number_data_int64>#, <lake_int8>),
					read : "std::vector<int8_t> (int64_t count)",
					read_string : "std::string (int64_t count)",

					tellg_ :# (<number_data_int64>),
					tellg : "int64_t () const",

					seekg_beg_ := (offset :<number_data_int64>#, <>),
					seekg_beg : "void (int64_t offset)",

					seekg_end_ := (offset :<number_data_int64>#, <>),
					seekg_end : "void (int64_t offset)",

					seekg_cur_ := (offset :<number_data_int64>#, <>),
					seekg_cur : "void (int64_t offset)",

					sync_ := (<>),
					sync : "bool ()",

					// river output
					put_ := (int_8 :<number_data_int8>#, <>),
					put : "void (int8_t int_8)",

					write_ := (lake :<lake_int8>#, <>),
					write : "void (std::vector<int8_t> const& lake)",
					write_string : "void (std::string const& str)",

					tellp_ :# (<number_data_int64>),
					tellp : "int64_t () const",

					seekp_beg_ := (offset :<number_data_int64>#, <>),
					seekp_beg : "void (int64_t offset)",

					seekp_end_ := (offset :<number_data_int64>#, <>),
					seekp_end : "void (int64_t offset)",

					seekp_cur_ := (offset :<number_data_int64>#, <>),
					seekp_cur : "void (int64_t offset)",

					flush_ := (<>),
					flush : "void ()",

					// river
					good_ :# (<>),
					good : "bool () const",

					eof_ :# (<>),
					eof : "bool () const",

					fail_ :# (<>),
					fail : "bool () const",

					bad_ :# (<>),
					bad : "bool () const",

					set_good_ := (value :#, <>),
					set_good : "void (bool value)",

					set_eof_ := (value :#, <>),
					set_eof : "void (bool value)",

					set_fail_ := (value :#, <>),
					set_fail : "void (bool value)",

					set_bad_ := (value :#, <>),
					set_bad : "void (bool value)",

					filename_ :# (<lake_int8>),
					filename : "std::string () const",
				}
			)
		)
	}
}