false &&
{	strange :
	{	<shoal> :: abstraction
		(	// dimensions
			#key :<<>># <>,
			#value :<<>># <>,
			(	// parent
				$$<collection>[#key, #value],
				{	// shoal
					has_string : "bool (std::string const& s) const { return collection_d<_key, _value>::has(sym(s)); }",
					at_string : "_value (std::string const& s) const { return collection_d<_key, _value>::at_(sym(s)); }",
					update_string : "void (std::string const& s, any_a<> const& value) { collection_d<_key, _value>::update_(sym(s), value); }",
					insert_string : "bool (std::string const& s, any_a<> const& value) { return collection_d<_key, _value>::insert_(sym(s), value); }",
					erase_string : "bool (std::string const& s) { return collection_d<_key, _value>::erase_(sym(s)); }",

					// mutable range
					mutate_begin_ := (<forward_mutator[<>]>),
					mutate_end_ := (<forward_mutator[<>]>),
				}
			)
		)
	}
}