false &&
{	strange :
	{	<shoal> :: abstraction
		(	// no dimensions
			(	// parent
				$$<collection>[],
				{	// shoal
					has_string : "bool (std::string const& s) const { return has(sym(s)); }",
					at_string : "any_a<> (std::string const& s) const { return at_(sym(s)); }",
					update_string : "void (std::string const& s, any_a<> const& value) { update_(sym(s), value); }",
					insert_string : "bool (std::string const& s, any_a<> const& value) { return insert_(sym(s), value); }",
					erase_string : "bool (std::string const& s) { return erase_(sym(s)); }",

					// mutable range
					mutate_begin_ := (<forward_mutator[<>]>),
					mutate_end_ := (<forward_mutator[<>]>),
				}
			)
		)
	}
}