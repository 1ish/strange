false &&
{	strange :
	{	<symbol> :: abstraction
		(	// no dimensions
			(	// parent
				$$<>[],
				{	// symbol
					to_lake_ :# (<lake_int8>),
					to_string : "std::string () const { return lake_to_string(to_lake_()); }",

					first_character : "int8_t () const { return to_lake_().extract_vector()[0]; }",
					last_character : "int8_t () const { auto const lake = to_lake_(); return lake.extract_vector()[lake.size() - 1]; }",

					add_ :# (symbol :<symbol>#, <symbol>),
					'operator+' : "symbol_a<> (symbol_a<> const& symbol) const { return add_(symbol); }",
				}
			)
		)
	}
}