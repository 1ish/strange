(	out :# $$strange::river::out[],
	out.write_["hello\n"],
	null,
	//out.:out:.write_["member\n"], //TODO out is null for out:.write_
	["pipe1\n", "pipe2\n", "pipe3\n"] | function(.., $$strange::river::out[].write_..),
	out.write_[if(check(out, <strange::river>), "river\n", "no river\n")],
	cast(out, <strange::river>).write_["river\n"],
	false &&
	{	'a' : out.write_["value\n"],
		2 : 'c',
		taste :
		{	//	template <typename element = any_a<>, typename ___ego___ = collection_a<>>
			//	class forest_t : public flock_t<___ego___>;
			//	<forest{<<>>}[<strange::symbol>]>

			<collection> :: abstraction
			(	#element :<<>># <>,
				(	$$<strange::range>[#element],
					{	empty_ :# (<>),
						size_ :# (<number_int_64>),
						has_ :# (item :#, <>),
						insert_ := (key :#, value :#, <>),
					}
				)
			),

			<forest> :: abstraction
			(	#element :<<>>,
				(	$$<taste::collection>[#element],
					{}
				)
			),

/*
			// parameters
			x :# 10		// any_a<> const& x = number_int_64_t<>::create(10)
			x :#		// any_a<> const& x
			x			// any_a<> const& x
			x := 10		// any_a<>& x = number_int_64_t<>::create(10)		- non-standard, but could be done with overloads
			x :=		// any_a<>& x

			// locals
			x :# 10		// auto const x = number_int_64_t<>::create(10)
			x :# null	// auto const x = any_a{}
			x :#		// auto const x = any_a{}
			x := 10		// auto x = number_int_64_t<>::create(10)
			x := null	// auto x = any_a{}
			x :=		// auto x = any_a{}
			x			// x

			// attributes
			_x :# 10	// any_a<> const _x = number_int_64_t<>::create(10)
			_x :#		// any_a<> const _x									- constructor
			_x := 10	// any_a<> _x = number_int_64_t<>::create(10)
			_x :=		// any_a<> _x										- constructor

			forest :: thing
			(	#element :<<>># <>,
				(	$$strange::flock[#element],
					{	create :: function
						(	range :<strange::range># $$strange::range::create[],
							animate(<taste::forest[#element]>, ^^[#element], range),
						//	$$<strange::range[#element]>::animate[$$taste::forest[#element], range],
						),

						_forest_ :=
						(	range :<strange::range>,
							(
							)
						)
					}
				)
			),

			f :<taste::forest[<symbol>]># $$taste::forest[<symbol>].create[],
*/
			inspiration :: function
			(
				{	create :: function
					(	$$strange::any_creature::create
						[	$$strange::conception::create
							[	$$strange::incarnation::create[$$taste::inspiration[]]
							]
						]
					)
				}
			)
		}
	},
	out.write_
	[
"line1
line2
"
	],
	out.write_["goodbye\n"],
)