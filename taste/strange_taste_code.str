(	cout :# $$strange::river::create_out[],
	cout.write["hello\n"],
	null &&
	{	'a' : cout.write["value\n"],
		2 : 'c',
		'taste' :
		{	//	template <typename _element_ = any_a<>, typename ___ego___ = collection_a<>>
			//	class forest_t : public flock_t<___ego___>;
			//	<forest{<<>>}[<strange::symbol>]>
/*
			<collection> :: abstraction
			(	_element_ :<<>># <>,
				conception
				(	$$<strange::range>[_element_],
					{	'empty'		:# (<>),
						'has'		:# (item, <>)
						'insert'	:= (key, value, <>)
						'size_'		:# <number_int_64>
					}
				)
			)

			'forest' :: inspiration
			(	_element_ :<<>># <>,
				___ego___ :<<>># <strange::collection>,
				incarnation
				(	$$strange::flock[_element_],
					{	'create' :: function
						(	range :<strange::range># $$strange::range::create[],
							$$<taste::collection>[_element_].creation[^^, range]
						)
					}
				)
			),
*/
			'inspiration' :: function
			(
				{	'create' :: function
					(	$$strange::any_creature::create
						[	$$strange::conception::create
							[	$$strange::incarnation::create[$$taste::inspiration[]]
							]
						]
					)
				}
			)
		}
	},
	cout.write
	[
"line1
line2
"
	],
	cout.write["goodbye\n"],
)