(	out :# $$strange::river::out[],
	out.write_["hello\n"],
	false &&
	{	'a' : out.write_["value\n"],
		2 : 'c',
		taste :
		{	//	template <typename _element = any_a<>, typename ___ego___ = collection_a<>>
			//	class forest_t : public flock_t<___ego___>;
			//	<forest{<<>>}[<strange::symbol>]>

			<collection> :: abstraction
			(	_element :<<>># <>,
				(	$$<strange::range>[_element],
					{	empty_ :# (<>),
						size_ :# (<number_int_64>),
						has_ :# (item, <>),
						insert_ := (key, value, <>),
					}
				)
			),

			<forest> :: abstraction
			(	_element :<<>>,
				(	$$<taste::collection>[_element],
					{}
				)
			),
/*
			forest :: thing
			(	_element :<<>># <>,
				(	$$strange::flock[_element],
					{	create :: function
						(	range :<strange::range># $$strange::range::create[],
							animate(<taste::forest[_element]>, ^^[_element], range),
						//	$$<strange::range[_element]>::animate[$$taste::forest[_element], range],
						),

						_forest_ :=
						(	range :<strange::range>,
							(
							)
						)
					}
				)
			),

			f :<taste::forest[<symbol>]># $$taste::forest[<symbol>].create[],
*/
			inspiration :: function
			(
				{	create :: function
					(	$$strange::any_creature::create
						[	$$strange::conception::create
							[	$$strange::incarnation::create[$$taste::inspiration[]]
							]
						]
					)
				}
			)
		}
	},
	out.write_
	[
"line1
line2
"
	],
	out.write_["goodbye\n"],
)